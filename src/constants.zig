// !!! DO NOT EDIT !!! Generated by build/generate.zig

const std = @import("std");
const lib = @import("lib.zig");

/// A MediaType representing "text/plain"
pub const TEXT_PLAIN = lib.MediaType{ .mime = lib.parser.TEXT_PLAIN };

/// A MediaType representing "text/plain; charset=utf-8"
pub const TEXT_PLAIN_UTF_8 = lib.MediaType{ .mime = lib.parser.TEXT_PLAIN_UTF_8 };

/// A MediaType representing "text/html"
pub const TEXT_HTML = lib.MediaType{ .mime = lib.parser.TEXT_HTML };

/// A MediaType representing "text/html; charset=utf-8"
pub const TEXT_HTML_UTF_8 = lib.MediaType{ .mime = lib.parser.TEXT_HTML_UTF_8 };

/// A MediaType representing "text/css"
pub const TEXT_CSS = lib.MediaType{ .mime = lib.parser.TEXT_CSS };

/// A MediaType representing "text/css; charset=utf-8"
pub const TEXT_CSS_UTF_8 = lib.MediaType{ .mime = lib.parser.TEXT_CSS_UTF_8 };

/// A MediaType representing "text/javascript"
pub const TEXT_JAVASCRIPT = lib.MediaType{ .mime = lib.parser.TEXT_JAVASCRIPT };

/// A MediaType representing "text/xml"
pub const TEXT_XML = lib.MediaType{ .mime = lib.parser.TEXT_XML };

/// A MediaType representing "text/event-stream"
pub const TEXT_EVENT_STREAM = lib.MediaType{ .mime = lib.parser.TEXT_EVENT_STREAM };

/// A MediaType representing "text/csv"
pub const TEXT_CSV = lib.MediaType{ .mime = lib.parser.TEXT_CSV };

/// A MediaType representing "text/csv; charset=utf-8"
pub const TEXT_CSV_UTF_8 = lib.MediaType{ .mime = lib.parser.TEXT_CSV_UTF_8 };

/// A MediaType representing "text/tab-separated-values"
pub const TEXT_TAB_SEPARATED_VALUES = lib.MediaType{ .mime = lib.parser.TEXT_TAB_SEPARATED_VALUES };

/// A MediaType representing "text/tab-separated-values; charset=utf-8"
pub const TEXT_TAB_SEPARATED_VALUES_UTF_8 = lib.MediaType{ .mime = lib.parser.TEXT_TAB_SEPARATED_VALUES_UTF_8 };

/// A MediaType representing "text/vcard"
pub const TEXT_VCARD = lib.MediaType{ .mime = lib.parser.TEXT_VCARD };

/// A MediaType representing "image/jpeg"
pub const IMAGE_JPEG = lib.MediaType{ .mime = lib.parser.IMAGE_JPEG };

/// A MediaType representing "image/gif"
pub const IMAGE_GIF = lib.MediaType{ .mime = lib.parser.IMAGE_GIF };

/// A MediaType representing "image/png"
pub const IMAGE_PNG = lib.MediaType{ .mime = lib.parser.IMAGE_PNG };

/// A MediaType representing "image/bmp"
pub const IMAGE_BMP = lib.MediaType{ .mime = lib.parser.IMAGE_BMP };

/// A MediaType representing "image/svg+xml"
pub const IMAGE_SVG = lib.MediaType{ .mime = lib.parser.IMAGE_SVG };

/// A MediaType representing "font/woff"
pub const FONT_WOFF = lib.MediaType{ .mime = lib.parser.FONT_WOFF };

/// A MediaType representing "font/woff2"
pub const FONT_WOFF2 = lib.MediaType{ .mime = lib.parser.FONT_WOFF2 };

/// A MediaType representing "application/json"
pub const APPLICATION_JSON = lib.MediaType{ .mime = lib.parser.APPLICATION_JSON };

/// A MediaType representing "application/javascript"
pub const APPLICATION_JAVASCRIPT = lib.MediaType{ .mime = lib.parser.APPLICATION_JAVASCRIPT };

/// A MediaType representing "application/javascript; charset=utf-8"
pub const APPLICATION_JAVASCRIPT_UTF_8 = lib.MediaType{ .mime = lib.parser.APPLICATION_JAVASCRIPT_UTF_8 };

/// A MediaType representing "application/x-www-form-urlencoded"
pub const APPLICATION_WWW_FORM_URLENCODED = lib.MediaType{ .mime = lib.parser.APPLICATION_WWW_FORM_URLENCODED };

/// A MediaType representing "application/octet-stream"
pub const APPLICATION_OCTET_STREAM = lib.MediaType{ .mime = lib.parser.APPLICATION_OCTET_STREAM };

/// A MediaType representing "application/msgpack"
pub const APPLICATION_MSGPACK = lib.MediaType{ .mime = lib.parser.APPLICATION_MSGPACK };

/// A MediaType representing "application/pdf"
pub const APPLICATION_PDF = lib.MediaType{ .mime = lib.parser.APPLICATION_PDF };

/// A MediaType representing "application/dns-message"
pub const APPLICATION_DNS = lib.MediaType{ .mime = lib.parser.APPLICATION_DNS };

/// A MediaRange representing "*/*"
pub const STAR_STAR = lib.MediaRange{ .mime = lib.parser.STAR_STAR };

/// A MediaRange representing "text/*"
pub const TEXT_STAR = lib.MediaRange{ .mime = lib.parser.TEXT_STAR };

/// A MediaRange representing "image/*"
pub const IMAGE_STAR = lib.MediaRange{ .mime = lib.parser.IMAGE_STAR };

/// A MediaRange representing "video/*"
pub const VIDEO_STAR = lib.MediaRange{ .mime = lib.parser.VIDEO_STAR };

/// A MediaRange representing "audio/*"
pub const AUDIO_STAR = lib.MediaRange{ .mime = lib.parser.AUDIO_STAR };
